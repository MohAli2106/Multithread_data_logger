pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'sensor_monitor'
        CONTAINER_NAME = 'sensor_data'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/MohAli2106/Multithread_data_logger.git'
            }
        }

        stage('Check Files') {
            steps {
                sh 'ls -la'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                    echo "Building Docker image..."
                    docker build --no-cache -t ${DOCKER_IMAGE_NAME} .
                '''
            }
        }

        stage('Stop Existing Container') {
            steps {
                echo 'Stopping existing container (if any)...'
                sh '''
                    docker stop ${CONTAINER_NAME} || true
                    docker rm ${CONTAINER_NAME} || true
                '''
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    echo 'Starting container and waiting for data...'
                    sh '''
                        docker run -d --name ${CONTAINER_NAME} ${DOCKER_IMAGE_NAME}
                        sleep 20
                    '''
                }
            }
        }

        stage('Extract Artifacts') {
            steps {
                script {
                   
                    sh '''
                        docker cp ${CONTAINER_NAME}:/workspace/sensor_data.log ./sensor_data.log
                        docker cp ${CONTAINER_NAME}:/workspace/python/static/plot.png ./plot.png
                    '''
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                archiveArtifacts artifacts: 'sensor_data.log, plot.png', allowEmptyArchive: true
                stash includes: 'sensor_data.log, plot.png', name: 'output-files'
            }
        }

        stage('Clean Up') {
            steps {
                sh '''
                    echo "Cleaning up..."
                    docker stop ${CONTAINER_NAME} || true
                    docker rm ${CONTAINER_NAME} || true
                    docker rmi ${DOCKER_IMAGE_NAME} || true
                '''
            }
        }
    }

    post {
        success {
            echo '‚úÖ Jenkins pipeline completed successfully!'
            echo 'üìé Artifacts (sensor_data.log, plot.png) are available in the build'
            mail to: 'mohamed.moustafa2106@gmail.com', subject: 'Pipeline Success', body: 'Sensor monitoring system built and tested successfully!'
        }
        failure {
            echo '‚ùå Jenkins pipeline failed!'
            mail to: 'mohamed.moustafa2106@gmail.com', subject: 'Pipeline Failed', body: "Build failed: ${env.BUILD_URL}"
        }
    }
}